{"version":3,"sources":["services/persons2.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","newObject","post","Notification","message","includes","className","Names","names","deleteName","name","number","onClick","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchInput","setSearchInput","notification","setNotification","nameListRender","setNameListRender","useEffect","console","log","personService","then","response","data","length","namesToShow","filter","p","delete","id","setTimeout","catch","error","value","onChange","event","target","onSubmit","preventDefault","some","concat","window","confirm","nameObject","nameToReplace","put","type","map","i","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0198e16.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n};\n\nexport default {\n  getAll: getAll,\n  create: create,\n  update: update,\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport personService from \"./services/persons2\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n  if (message.includes(\"removed\")) {\n    return <div className=\"error\">{message}</div>;\n  }\n  if (message.includes(\"alidat\")) {\n    return <div className=\"error\">{message}</div>;\n  }\n  return <div className=\"notification\">{message}</div>;\n};\n\nconst Names = ({ names, deleteName }) => {\n  return (\n    <div>\n      {names.name} {names.number}\n      <button onClick={deleteName}>delete</button>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n  const [nameListRender, setNameListRender] = useState();\n\n  useEffect(() => {\n    console.log(\"effect\");\n    personService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, [nameListRender]);\n  console.log(\"render\", persons.length, \"notes\");\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    if (!persons.some((p) => p.name === newName)) {\n      console.log(\"button clicked\", event.target);\n\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n      };\n\n      personService\n        .create(nameObject)\n        .then((response) => {\n          setPersons(persons.concat(response.data));\n\n          setNotification(`Added ${newName} `);\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        })\n        .catch((error) => {\n          console.log(error.response.data);\n          setNotification(error.response.data.error);\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000);\n        });\n    }\n    if (persons.some((p) => p.name === newName)) {\n      if (\n        window.confirm(\n          `${newName} has already added to phonebook. You wanna replace old number?`\n        )\n      ) {\n        const nameObject = {\n          name: newName,\n          number: newNumber,\n        };\n\n        const nameToReplace = persons.filter((name) =>\n          name.name.includes(newName)\n        );\n\n        axios\n          .put(\"/api/persons/\" + nameToReplace[0].id, nameObject)\n\n          .then((response) => console.log(response.data))\n          .catch((error) => {\n            setNotification(error.response.data.error);\n\n            setTimeout(() => {\n              setNotification(null);\n            }, 5000);\n          });\n        setNotification(`${newName}Â´s number updated`);\n        setTimeout(() => {\n          setNotification(null);\n        }, 5000);\n      }\n\n      setNewName(\"\");\n      setNewNumber(\"\");\n    }\n  };\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n  const handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  const handleNameSearch = (event) => {\n    setSearchInput(event.target.value);\n  };\n  console.log(persons);\n  const namesToShow = persons.filter((p) => p.name.includes(searchInput));\n\n  const deleteName = (name) => () => {\n    axios\n      .delete(\"/api/persons/\" + name.id)\n      .then((response) => {\n        console.log(response.data);\n        setNameListRender(namesToShow);\n        setNotification(`${name.name} deleted `);\n        setTimeout(() => {\n          setNotification(null);\n        }, 5000);\n      })\n      .catch((error) => {\n        setNotification(`Note '${name.name}' was already removed from server`);\n        setNameListRender(namesToShow);\n\n        setTimeout(() => {\n          setNotification(null);\n        }, 5000);\n      });\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} />\n      search\n      <input value={searchInput} onChange={handleNameSearch} />\n      <h2>Add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Names</h2>\n      {namesToShow &&\n        namesToShow.map((name, i) => (\n          <div key={i + name.name}>\n            <Names key={i} names={name} deleteName={deleteName(name)} />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}